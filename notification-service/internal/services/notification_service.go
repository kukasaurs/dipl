package services

import (
	"cleaning-app/notification-service/internal/models"
	"cleaning-app/notification-service/internal/utils/push"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"time"

	"github.com/redis/go-redis/v9"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

const (
	OrderEventsChannel   = "order_events"
	SupportEventsChannel = "support_events"
	AdminEventsChannel   = "admin_events"
	PaymentEventsChannel = "payment_events"
	SubscriptionChannel  = "subscription_events"
	ReviewEventsChannel  = "review_events"
)

type NotificationService struct {
	repo  NotificationRepository
	redis *redis.Client
	FCM   *push.FCMClient
}

type NotificationRepository interface {
	Create(ctx context.Context, notification *models.Notification) error
	GetByUserID(ctx context.Context, userID string, limit, offset int64) ([]models.Notification, error)
	MarkAsRead(ctx context.Context, id primitive.ObjectID) error
}

func NewNotificationService(repo NotificationRepository, rdb *redis.Client, fcm *push.FCMClient) *NotificationService {
	return &NotificationService{
		repo:  repo,
		redis: rdb,
		FCM:   fcm,
	}
}

func (s *NotificationService) SendPush(req models.PushNotificationRequest) error {
	return s.FCM.SendPushNotification(req.Token, req.Title, req.Message)
}

// EventPayload –æ–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏–π –∏–∑ Redis
type EventPayload struct {
	UserID    string            `json:"user_id"`
	Role      string            `json:"role"`
	EventType string            `json:"event_type,omitempty"`
	Title     string            `json:"title,omitempty"`
	Message   string            `json:"message"`
	ExtraData map[string]string `json:"extra_data,omitempty"`
}

// SendNotification —Å–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
func (s *NotificationService) SendNotification(ctx context.Context, notification *models.Notification) error {
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î
	if err := s.repo.Create(ctx, notification); err != nil {
		return fmt.Errorf("failed to save notification: %w", err)
	}

	log.Printf("Notification sent - Type: %s, User: %s, Title: %s",
		notification.Type, notification.UserID, notification.Title)

	return nil
}

// ProcessEvent –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑ Redis –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
func (s *NotificationService) ProcessEvent(ctx context.Context, channel string, payload []byte) error {
	var event EventPayload
	if err := json.Unmarshal(payload, &event); err != nil {
		return fmt.Errorf("failed to unmarshal event: %w", err)
	}

	var notifType models.NotificationType
	var deliveryType models.DeliveryMethod
	var title string

	switch channel {
	case OrderEventsChannel:
		notifType = models.TypeOrderEvent
		title = formatOrderTitle(event.EventType, event.ExtraData)
		deliveryType = determineDeliveryType(event.Role, "order")
	case SupportEventsChannel:
		notifType = models.TypeSupportEvent
		title = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
		deliveryType = determineDeliveryType(event.Role, "support")
	case AdminEventsChannel:
		notifType = models.TypeAdminAlert
		title = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
		deliveryType = models.DeliveryPush
	case PaymentEventsChannel:
		notifType = models.TypeSystemMessage
		title = formatPaymentTitle(event.EventType)
		deliveryType = models.DeliveryEmail

	case SubscriptionChannel:
		notifType = models.TypeSystemMessage
		title = formatSubscriptionTitle(event.EventType)
		deliveryType = models.DeliveryEmail

	case ReviewEventsChannel:
		notifType = models.TypeSystemMessage
		title = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤"
		deliveryType = models.DeliveryPush
	default:
		notifType = models.TypeSystemMessage
		title = event.Title
		if title == "" {
			title = "–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
		}
		deliveryType = models.DeliveryPush
	}

	notification := &models.Notification{
		UserID:       event.UserID,
		Title:        title,
		Message:      event.Message,
		Type:         notifType,
		DeliveryType: deliveryType,
		IsRead:       false,
		CreatedAt:    time.Now(),
		Metadata:     event.ExtraData,
	}

	return s.SendNotification(ctx, notification)
}

/* <<<<<<<<<<<<<<  ‚ú® Windsurf Command üåü >>>>>>>>>>>>>>>> */
func formatPaymentTitle(eventType string) string {
	switch eventType {
	case "success":
		return "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"
	case "failed":
		return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ"
	case "refunded":
		return "–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤"
	default:
		return "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ"
	}

}

func formatSubscriptionTitle(eventType string) string {
	switch eventType {
	case "started":
		return "–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
	case "expired":
		return "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"
	case "renewed":
		return "–ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
	default:
		return "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ"
	}

}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
func formatOrderTitle(eventType string, data map[string]string) string {
	switch eventType {
	case "created":
		return "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω"
	case "assigned":
		return "–ó–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω"
	case "completed":
		return "–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω"
	case "cancelled":
		return "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω"
	case "reminder":
		return "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ"
	default:
		return "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
	}
}

// determineDeliveryType –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func determineDeliveryType(role, eventSource string) models.DeliveryMethod {
	if role == "client" {
		if eventSource == "order" {
			return models.DeliveryEmail
		}
		return models.DeliveryPush
	}

	if role == "cleaner" || role == "manager" {
		return models.DeliverySMS
	}

	return models.DeliveryPush
}

// GetNotifications –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (s *NotificationService) GetNotifications(ctx context.Context, userID string, limit, offset int64) ([]models.Notification, error) {
	return s.repo.GetByUserID(ctx, userID, limit, offset)
}

// MarkAsRead –æ—Ç–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
func (s *NotificationService) MarkAsRead(ctx context.Context, id primitive.ObjectID) error {
	return s.repo.MarkAsRead(ctx, id)
}

// StartRedisSubscribers –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Redis
func (s *NotificationService) StartRedisSubscribers(ctx context.Context) {
	channels := []string{OrderEventsChannel, SupportEventsChannel, AdminEventsChannel}

	pubsub := s.redis.Subscribe(ctx, channels...)
	defer pubsub.Close()

	log.Printf("Subscribed to Redis channels: %v", channels)

	ch := pubsub.Channel()
	for {
		select {
		case msg := <-ch:
			log.Printf("Received message from channel %s", msg.Channel)
			if err := s.ProcessEvent(ctx, msg.Channel, []byte(msg.Payload)); err != nil {
				log.Printf("Error processing event: %v", err)
			}
		case <-ctx.Done():
			log.Println("Stopping Redis subscribers...")
			return
		}
	}
}
